diff --git a/src/Text/Pandoc/Writers/Haddock.hs b/src/Text/Pandoc/Writers/Haddock.hs
index 9d8c5ec41..139510ecf 100644
--- a/src/Text/Pandoc/Writers/Haddock.hs
+++ b/src/Text/Pandoc/Writers/Haddock.hs
@@ -121,9 +121,11 @@ blockToHaddock opts (Table _ blkCapt specs thead tbody tfoot) = do
   let caption'' = if null caption
                      then empty
                      else blankline <> caption' <> blankline
+  let strictWrapping = False -- Haddock doesn't handle intra-word splitting well
   tbl <- gridTable opts blockListToHaddock
-              (all null headers) (map (const AlignDefault) aligns)
-                widths headers rows
+              (all null headers) strictWrapping
+              (map (const AlignDefault) aligns)
+              widths headers rows
   return $ (tbl $$ blankline $$ caption'') $$ blankline
 blockToHaddock opts (BulletList items) = do
   contents <- mapM (bulletListItemToHaddock opts) items
diff --git a/src/Text/Pandoc/Writers/Markdown.hs b/src/Text/Pandoc/Writers/Markdown.hs
index e41273b27..b34e440af 100644
--- a/src/Text/Pandoc/Writers/Markdown.hs
+++ b/src/Text/Pandoc/Writers/Markdown.hs
@@ -640,7 +640,7 @@ blockToMarkdown' opts t@(Table _ blkCapt specs thead tbody tfoot) = do
             | isEnabled Ext_grid_tables opts &&
                writerColumns opts >= 8 * numcols -> (id,) <$>
                 gridTable opts blockListToMarkdown
-                  (all null headers) aligns' widths' headers rows
+                  (all null headers) True aligns' widths' headers rows
             | hasSimpleCells &&
               isEnabled Ext_pipe_tables opts -> do
                 rawHeaders <- padRow <$> mapM (blockListToMarkdown opts) headers
diff --git a/src/Text/Pandoc/Writers/Muse.hs b/src/Text/Pandoc/Writers/Muse.hs
index bf3265107..d1a4c5a31 100644
--- a/src/Text/Pandoc/Writers/Muse.hs
+++ b/src/Text/Pandoc/Writers/Muse.hs
@@ -264,7 +264,7 @@ blockToMuse (Table _ blkCapt specs thead tbody tfoot) =
     then simpleTable caption headers rows
     else do
       opts <- asks envOptions
-      gridTable opts blocksToDoc True (map (const AlignDefault) aligns) widths headers rows
+      gridTable opts blocksToDoc True True (map (const AlignDefault) aligns) widths headers rows
   where
     (caption, aligns, widths, headers, rows) = toLegacyTable blkCapt specs thead tbody tfoot
     blocksToDoc opts blocks =
diff --git a/src/Text/Pandoc/Writers/RST.hs b/src/Text/Pandoc/Writers/RST.hs
index 43bf382b7..98b4ef3f6 100644
--- a/src/Text/Pandoc/Writers/RST.hs
+++ b/src/Text/Pandoc/Writers/RST.hs
@@ -296,15 +296,16 @@ blockToRST (Table _ blkCapt specs thead tbody tfoot) = do
          return result
   opts <- gets stOptions
   let isSimple = all (== 0) widths && length widths > 1
+  let strictWrapping = True
   tbl <- if isSimple
             then do
               tbl' <- simpleTable opts blocksToDoc headers rows
               if offset tbl' > writerColumns opts
-                 then gridTable opts blocksToDoc (all null headers)
+                 then gridTable opts blocksToDoc (all null headers) strictWrapping
                       (map (const AlignDefault) aligns) widths
                       headers rows
                  else return tbl'
-            else gridTable opts blocksToDoc (all null headers)
+            else gridTable opts blocksToDoc (all null headers) strictWrapping
                   (map (const AlignDefault) aligns) widths
                   headers rows
   return $ blankline $$
diff --git a/src/Text/Pandoc/Writers/Shared.hs b/src/Text/Pandoc/Writers/Shared.hs
index 642b33933..7c341df7b 100644
--- a/src/Text/Pandoc/Writers/Shared.hs
+++ b/src/Text/Pandoc/Writers/Shared.hs
@@ -211,12 +211,17 @@ gridTable :: (Monad m, HasChars a)
           => WriterOptions
           -> (WriterOptions -> [Block] -> m (Doc a))
           -> Bool -- ^ headless
+          -> Bool
+          -- ^ strict wrapping, this applies when wrapping with given widths.
+          -- If it is false then the columns may be wider than specified. They
+          -- may be widened to accomodate the contents generated by blocksToDoc
+          -- at their minimum width rendering.
           -> [Alignment]
           -> [Double]
           -> [[Block]]
           -> [[[Block]]]
           -> m (Doc a)
-gridTable opts blocksToDoc headless aligns widths headers rows = do
+gridTable opts blocksToDoc headless strictWrapping aligns widths headers rows = do
   -- the number of columns will be used in case of even widths
   let numcols = maximum (length aligns : length widths :
                            map length (headers:rows))
@@ -238,7 +243,15 @@ gridTable opts blocksToDoc headless aligns widths headers rows = do
         rawRows' <- mapM
              (\cs -> zipWithM blocksToDoc columnOptions cs)
              rows
-        return (widthsInChars', rawHeaders', rawRows')
+        let numChars [] = 0
+            numChars xs = maximum . map minOffset $ xs
+            realWidthsInChars =
+                map numChars $ transpose (rawHeaders' : rawRows')
+            wrapWidths =
+              if strictWrapping
+                then widthsInChars'
+                else zipWith max widthsInChars' realWidthsInChars
+        return (wrapWidths, rawHeaders', rawRows')
   let handleGivenWidths widths' = handleGivenWidthsInChars
                                      (officialWidthsInChars widths')
   -- handleFullWidths tries to wrap cells to the page width or even
