{ pkgs ? import <nixpkgs> { config.allowBroken = true; }, compiler ? "ghc882"
, hoogle ? true }:

let
  # src = pkgs.nix-gitignore.gitignoreSource [ ] ./.;
  # src = pkgs.lib.cleanSourceWith { src = ./.; filter = path: type: baseNameOf path == "package.yaml"; };
  src = pkgs.writeTextDir "package.yaml" (builtins.readFile ./package.yaml);

  compiler' = if compiler != null then
    compiler
  else
    "ghc" + pkgs.lib.concatStrings
    (pkgs.lib.splitVersion pkgs.haskellPackages.ghc.version);

  # Any overrides we require to the specified haskell package set
  haskellPackages = with pkgs.haskell.lib;
    pkgs.haskell.packages.${compiler'}.override {
      overrides = self: super:
        {
          algebraic-graphs = dontCheck super.algebraic-graphs;
          first-class-families = doJailbreak super.first-class-families;
          inline-c = self.inline-c_0_9_0_0;
          polysemy-plugin = self.callCabal2nix "" (
              (pkgs.fetchFromGitHub {
                owner = "polysemy-research";
                repo = "polysemy";
                rev = "72dc96fbd13dba6d8e9767253b7298e00a781bee";
                sha256 = "09b1n71gjmhf4ggx2wlywxm11jl3qbmhnlmmchj8pyy3hczl6hb5";
              } + "/polysemy-plugin")
            ) { };
          polysemy = self.callCabal2nix "" (
              (pkgs.fetchFromGitHub {
                owner = "polysemy-research";
                repo = "polysemy";
                rev = "72dc96fbd13dba6d8e9767253b7298e00a781bee";
                sha256 = "09b1n71gjmhf4ggx2wlywxm11jl3qbmhnlmmchj8pyy3hczl6hb5";
              })
            ) { };
        } // pkgs.lib.optionalAttrs hoogle {
          ghc = super.ghc // { withPackages = super.ghc.withHoogle; };
          ghcWithPackages = self.ghc.withPackages;
        };
    };

  # Any packages to appear in the environment provisioned by nix-shell
  extraEnvPackages = with pkgs; [ python3 asciidoctor lasem ] ;

  # Generate a haskell derivation using the cabal2nix tool on `package.yaml`
  drv = let old = haskellPackages.callCabal2nix "" src { };
  in old // {
    # Insert the extra environment packages into the environment generated by
    # cabal2nix
    env = pkgs.lib.overrideDerivation old.env (attrs:
      {
        buildInputs = attrs.buildInputs ++ extraEnvPackages;
      } // pkgs.lib.optionalAttrs hoogle {
        shellHook = attrs.shellHook + ''
          export HIE_HOOGLE_DATABASE="$(cat $(${pkgs.which}/bin/which hoogle) | sed -n -e 's|.*--database \(.*\.hoo\).*|\1|p')"
        '';
      });
  };

in if pkgs.lib.inNixShell then drv.env else drv
