name: vulkan
version: 3.1.0.0
synopsis: Bindings to the Vulkan graphics API.
category: Graphics
maintainer: Joe Hermaszewski <live.long.and.prosper@monoid.al>
github: expipiplus1/vulkan
extra-source-files:
  - readme.md
  - changelog.md
  - default.nix
license: BSD-3-Clause

library:
  source-dirs: src
  dependencies:
    - base < 4.14
    - bytestring
    - transformers
    - vector
  when:
    - condition: os(windows)
      then:
        extra-libraries: vulkan-1
      else:
        extra-libraries: vulkan
    - condition: flag(safe-foreign-calls)
      cpp-options: -DSAFE_FOREIGN_CALLS
  ghc-options:
    - -Wall
    - -Wno-unticked-promoted-constructors
    - -Wno-missing-pattern-synonym-signatures
    - -Wno-unused-imports
    - -Wno-missing-signatures
    - -Wno-partial-type-signatures

internal-libraries:
  utils:
    source-dirs: utils
    dependencies:
      - base < 4.14
      - bytestring
      - extra
      - file-embed
      - template-haskell
      - temporary
      - typed-process
      - vulkan

executables:
  info:
    main: Main.hs
    source-dirs: examples/info
    when:
    - condition: flag(build-examples)
      then:
        buildable: true
        dependencies:
          - base < 4.14
          - vulkan
          - pretty-simple
          - bytestring
      else:
        buildable: false

  sdl-triangle:
    main: Main.hs
    source-dirs: examples/sdl-triangle
    when:
    - condition: flag(build-examples)
      then:
        buildable: true
        dependencies:
          - base < 4.14
          - bytestring
          - extra
          - managed
          - pretty-show
          - say
          - sdl2 >= 2.5.2.0
          - text
          - transformers
          - utils
          - vector
          - vulkan
      else:
        buildable: false
    c-sources: examples/sdl-triangle/DebugCallback.c

flags:
  safe-foreign-calls:
    description:
      Do not mark foreign imports as 'unsafe'. This means that
      callbacks from Vulkan to Haskell will work. If you are using
      these then make sure this flag is enabled.
    default: no
    manual: yes

  build-examples:
    description:
      Build example executables
    default: no
    manual: yes

default-extensions:
  - AllowAmbiguousTypes
  - CPP
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DerivingStrategies
  - DuplicateRecordFields
  - FlexibleContexts
  - FlexibleInstances
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - LambdaCase
  - MagicHash
  - NoMonomorphismRestriction
  - OverloadedStrings
  - PartialTypeSignatures
  - PatternSynonyms
  - PolyKinds
  - QuantifiedConstraints
  - RankNTypes
  - RecordWildCards
  - RoleAnnotations
  - ScopedTypeVariables
  - StandaloneDeriving
  - Strict
  - TypeApplications
  - TypeFamilyDependencies
  - TypeOperators
  - TypeSynonymInstances
  - UndecidableInstances
  - ViewPatterns

